/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MixerMerkleRoot {
  export type DepositStruct = {
    depositId: BytesLike;
    user: AddressLike;
    amount: BigNumberish;
  };

  export type DepositStructOutput = [
    depositId: string,
    user: string,
    amount: bigint
  ] & { depositId: string; user: string; amount: bigint };
}

export interface MixerMerkleRootInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_FEE"
      | "OWNER_ROLE"
      | "deleteDeposit"
      | "deposit"
      | "emergencyWithdrawToUser"
      | "fee"
      | "feeRecipient"
      | "getDeposit"
      | "getDepositIdAt"
      | "getFee"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "hasUserWithdrawn"
      | "paused"
      | "recoverERC20"
      | "recoverEth"
      | "renounceRole"
      | "revokeRole"
      | "setFee"
      | "setFeeRecipient"
      | "setPaused"
      | "shouldTransferEther"
      | "supportsInterface"
      | "totalDeposits"
      | "transferEther"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositCreated"
      | "DepositDeleted"
      | "EmergencyPause"
      | "EtherTransferred"
      | "FeeRecipientUpdated"
      | "FeeUpdated"
      | "MerkleRootUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "WithdrawalExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawToUser",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositIdAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserWithdrawn",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverEth",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "shouldTransferEther",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferEther",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositIdAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUserWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldTransferEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEther",
    data: BytesLike
  ): Result;
}

export namespace DepositCreatedEvent {
  export type InputTuple = [
    depositId: BytesLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [depositId: string, user: string, amount: bigint];
  export interface OutputObject {
    depositId: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositDeletedEvent {
  export type InputTuple = [depositId: BytesLike];
  export type OutputTuple = [depositId: string];
  export interface OutputObject {
    depositId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EtherTransferredEvent {
  export type InputTuple = [
    depositId: BytesLike,
    user: AddressLike,
    amount: BigNumberish,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    depositId: string,
    user: string,
    amount: bigint,
    releaseTime: bigint
  ];
  export interface OutputObject {
    depositId: string;
    user: string;
    amount: bigint;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [oldRecipient: string, newRecipient: string];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootUpdatedEvent {
  export type InputTuple = [
    depositId: BytesLike,
    oldRoot: BytesLike,
    newRoot: BytesLike
  ];
  export type OutputTuple = [
    depositId: string,
    oldRoot: string,
    newRoot: string
  ];
  export interface OutputObject {
    depositId: string;
    oldRoot: string;
    newRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalExecutedEvent {
  export type InputTuple = [
    depositId: BytesLike,
    user: AddressLike,
    amount: BigNumberish,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    depositId: string,
    user: string,
    amount: bigint,
    releaseTime: bigint
  ];
  export interface OutputObject {
    depositId: string;
    user: string;
    amount: bigint;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MixerMerkleRoot extends BaseContract {
  connect(runner?: ContractRunner | null): MixerMerkleRoot;
  waitForDeployment(): Promise<this>;

  interface: MixerMerkleRootInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  OWNER_ROLE: TypedContractMethod<[], [string], "view">;

  deleteDeposit: TypedContractMethod<
    [depositId: BytesLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[depositId: BytesLike], [void], "payable">;

  emergencyWithdrawToUser: TypedContractMethod<
    [depositId: BytesLike],
    [void],
    "nonpayable"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getDeposit: TypedContractMethod<
    [depositId: BytesLike],
    [MixerMerkleRoot.DepositStructOutput],
    "view"
  >;

  getDepositIdAt: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getFee: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasUserWithdrawn: TypedContractMethod<
    [depositId: BytesLike, user: AddressLike, releaseTime: BigNumberish],
    [boolean],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  recoverERC20: TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverEth: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  shouldTransferEther: TypedContractMethod<
    [
      depositId: BytesLike,
      recipient: AddressLike,
      amount: BigNumberish,
      releaseTime: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalDeposits: TypedContractMethod<[], [bigint], "view">;

  transferEther: TypedContractMethod<
    [
      depositId: BytesLike,
      recipient: AddressLike,
      amount: BigNumberish,
      releaseTime: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OWNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deleteDeposit"
  ): TypedContractMethod<[depositId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[depositId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawToUser"
  ): TypedContractMethod<[depositId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<
    [depositId: BytesLike],
    [MixerMerkleRoot.DepositStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositIdAt"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserWithdrawn"
  ): TypedContractMethod<
    [depositId: BytesLike, user: AddressLike, releaseTime: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverEth"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shouldTransferEther"
  ): TypedContractMethod<
    [
      depositId: BytesLike,
      recipient: AddressLike,
      amount: BigNumberish,
      releaseTime: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferEther"
  ): TypedContractMethod<
    [
      depositId: BytesLike,
      recipient: AddressLike,
      amount: BigNumberish,
      releaseTime: BigNumberish,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DepositCreated"
  ): TypedContractEvent<
    DepositCreatedEvent.InputTuple,
    DepositCreatedEvent.OutputTuple,
    DepositCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DepositDeleted"
  ): TypedContractEvent<
    DepositDeletedEvent.InputTuple,
    DepositDeletedEvent.OutputTuple,
    DepositDeletedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPause"
  ): TypedContractEvent<
    EmergencyPauseEvent.InputTuple,
    EmergencyPauseEvent.OutputTuple,
    EmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "EtherTransferred"
  ): TypedContractEvent<
    EtherTransferredEvent.InputTuple,
    EtherTransferredEvent.OutputTuple,
    EtherTransferredEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootUpdated"
  ): TypedContractEvent<
    MerkleRootUpdatedEvent.InputTuple,
    MerkleRootUpdatedEvent.OutputTuple,
    MerkleRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalExecuted"
  ): TypedContractEvent<
    WithdrawalExecutedEvent.InputTuple,
    WithdrawalExecutedEvent.OutputTuple,
    WithdrawalExecutedEvent.OutputObject
  >;

  filters: {
    "DepositCreated(bytes32,address,uint256)": TypedContractEvent<
      DepositCreatedEvent.InputTuple,
      DepositCreatedEvent.OutputTuple,
      DepositCreatedEvent.OutputObject
    >;
    DepositCreated: TypedContractEvent<
      DepositCreatedEvent.InputTuple,
      DepositCreatedEvent.OutputTuple,
      DepositCreatedEvent.OutputObject
    >;

    "DepositDeleted(bytes32)": TypedContractEvent<
      DepositDeletedEvent.InputTuple,
      DepositDeletedEvent.OutputTuple,
      DepositDeletedEvent.OutputObject
    >;
    DepositDeleted: TypedContractEvent<
      DepositDeletedEvent.InputTuple,
      DepositDeletedEvent.OutputTuple,
      DepositDeletedEvent.OutputObject
    >;

    "EmergencyPause(bool)": TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;
    EmergencyPause: TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;

    "EtherTransferred(bytes32,address,uint256,uint256)": TypedContractEvent<
      EtherTransferredEvent.InputTuple,
      EtherTransferredEvent.OutputTuple,
      EtherTransferredEvent.OutputObject
    >;
    EtherTransferred: TypedContractEvent<
      EtherTransferredEvent.InputTuple,
      EtherTransferredEvent.OutputTuple,
      EtherTransferredEvent.OutputObject
    >;

    "FeeRecipientUpdated(address,address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "MerkleRootUpdated(bytes32,bytes32,bytes32)": TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;
    MerkleRootUpdated: TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "WithdrawalExecuted(bytes32,address,uint256,uint256)": TypedContractEvent<
      WithdrawalExecutedEvent.InputTuple,
      WithdrawalExecutedEvent.OutputTuple,
      WithdrawalExecutedEvent.OutputObject
    >;
    WithdrawalExecuted: TypedContractEvent<
      WithdrawalExecutedEvent.InputTuple,
      WithdrawalExecutedEvent.OutputTuple,
      WithdrawalExecutedEvent.OutputObject
    >;
  };
}
