/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PointsFarming {
  export type UserPositionInfoStruct = {
    liquidity: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    user: AddressLike;
    pid: BigNumberish;
    poolAddress: AddressLike;
    points: BigNumberish;
    tokenId: BigNumberish;
    lastUpdateBlock: BigNumberish;
  };

  export type UserPositionInfoStructOutput = [
    liquidity: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    user: string,
    pid: bigint,
    poolAddress: string,
    points: bigint,
    tokenId: bigint,
    lastUpdateBlock: bigint
  ] & {
    liquidity: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    user: string;
    pid: bigint;
    poolAddress: string;
    points: bigint;
    tokenId: bigint;
    lastUpdateBlock: bigint;
  };
}

export interface PointsFarmingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WPLS_DAI_POOL"
      | "addV3Pool"
      | "balanceOf"
      | "collect"
      | "deposit"
      | "disableV3"
      | "getEthPriceInUSD"
      | "getPositionValueInUSD"
      | "getTokenPriceInUSD"
      | "getUserAddresses"
      | "getUserPositions"
      | "getUserTokens"
      | "getUserTotalPoints"
      | "multicall"
      | "nonfungiblePositionManager"
      | "onERC721Received"
      | "owner"
      | "pendingPoints"
      | "pointsThreshold"
      | "poolLength"
      | "recoverERC721"
      | "renounceOwnership"
      | "setPointsThreshold"
      | "tokenOfOwnerByIndex"
      | "transferOwnership"
      | "userPositionInfos"
      | "userTotalPoints"
      | "usersAddresses"
      | "usersIds"
      | "usersLength"
      | "v3PoolAddressPid"
      | "v3PoolInfo"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddPool"
      | "OwnershipTransferred"
      | "PointsThresholdUpdated"
      | "PointsUpdated"
      | "PositionDeposited"
      | "PositionWithdrawn"
      | "Recovered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "WPLS_DAI_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addV3Pool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableV3",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPriceInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionValueInUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceInUSD",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAddresses",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pointsThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC721",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPointsThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositionInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usersAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usersIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "v3PoolAddressPid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "v3PoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "WPLS_DAI_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addV3Pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disableV3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEthPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionValueInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPointsThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositionInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTotalPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v3PoolAddressPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "v3PoolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AddPoolEvent {
  export type InputTuple = [pid: BigNumberish, v3Pool: AddressLike];
  export type OutputTuple = [pid: bigint, v3Pool: string];
  export interface OutputObject {
    pid: bigint;
    v3Pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsThresholdUpdatedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    newThreshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, newThreshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, newPoints: BigNumberish];
  export type OutputTuple = [tokenId: bigint, newPoints: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    poolAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    poolAddress: string
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    poolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    poolAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    poolAddress: string
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    poolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredEvent {
  export type InputTuple = [
    token: AddressLike,
    tokenId: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [token: string, tokenId: bigint, to: string];
  export interface OutputObject {
    token: string;
    tokenId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PointsFarming extends BaseContract {
  connect(runner?: ContractRunner | null): PointsFarming;
  waitForDeployment(): Promise<this>;

  interface: PointsFarmingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WPLS_DAI_POOL: TypedContractMethod<[], [string], "view">;

  addV3Pool: TypedContractMethod<
    [poolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  collect: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  disableV3: TypedContractMethod<
    [poolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEthPriceInUSD: TypedContractMethod<[], [bigint], "view">;

  getPositionValueInUSD: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenPriceInUSD: TypedContractMethod<
    [token: AddressLike, poolAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserAddresses: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;

  getUserPositions: TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [PointsFarming.UserPositionInfoStructOutput[]],
    "view"
  >;

  getUserTokens: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserTotalPoints: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingPoints: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  pointsThreshold: TypedContractMethod<[], [bigint], "view">;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  recoverERC721: TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPointsThreshold: TypedContractMethod<
    [_newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPositionInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        liquidity: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        user: string;
        pid: bigint;
        poolAddress: string;
        points: bigint;
        tokenId: bigint;
        lastUpdateBlock: bigint;
      }
    ],
    "view"
  >;

  userTotalPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  usersAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  usersIds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  usersLength: TypedContractMethod<[], [bigint], "view">;

  v3PoolAddressPid: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  v3PoolInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint, boolean] & {
        v3Pool: string;
        token0: string;
        token1: string;
        token0Symbol: string;
        token1Symbol: string;
        fee: bigint;
        isEnabled: boolean;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WPLS_DAI_POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addV3Pool"
  ): TypedContractMethod<[poolAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collect"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableV3"
  ): TypedContractMethod<[poolAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEthPriceInUSD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionValueInUSD"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenPriceInUSD"
  ): TypedContractMethod<
    [token: AddressLike, poolAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAddresses"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPositions"
  ): TypedContractMethod<
    [user: AddressLike, offset: BigNumberish, limit: BigNumberish],
    [PointsFarming.UserPositionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTokens"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserTotalPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingPoints"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoverERC721"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPointsThreshold"
  ): TypedContractMethod<[_newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPositionInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        liquidity: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        user: string;
        pid: bigint;
        poolAddress: string;
        points: bigint;
        tokenId: bigint;
        lastUpdateBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "usersAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "usersIds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "usersLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "v3PoolAddressPid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "v3PoolInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint, boolean] & {
        v3Pool: string;
        token0: string;
        token1: string;
        token0Symbol: string;
        token1Symbol: string;
        fee: bigint;
        isEnabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AddPool"
  ): TypedContractEvent<
    AddPoolEvent.InputTuple,
    AddPoolEvent.OutputTuple,
    AddPoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsThresholdUpdated"
  ): TypedContractEvent<
    PointsThresholdUpdatedEvent.InputTuple,
    PointsThresholdUpdatedEvent.OutputTuple,
    PointsThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PointsUpdated"
  ): TypedContractEvent<
    PointsUpdatedEvent.InputTuple,
    PointsUpdatedEvent.OutputTuple,
    PointsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionDeposited"
  ): TypedContractEvent<
    PositionDepositedEvent.InputTuple,
    PositionDepositedEvent.OutputTuple,
    PositionDepositedEvent.OutputObject
  >;
  getEvent(
    key: "PositionWithdrawn"
  ): TypedContractEvent<
    PositionWithdrawnEvent.InputTuple,
    PositionWithdrawnEvent.OutputTuple,
    PositionWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Recovered"
  ): TypedContractEvent<
    RecoveredEvent.InputTuple,
    RecoveredEvent.OutputTuple,
    RecoveredEvent.OutputObject
  >;

  filters: {
    "AddPool(uint256,address)": TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;
    AddPool: TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsThresholdUpdated(uint256,uint256)": TypedContractEvent<
      PointsThresholdUpdatedEvent.InputTuple,
      PointsThresholdUpdatedEvent.OutputTuple,
      PointsThresholdUpdatedEvent.OutputObject
    >;
    PointsThresholdUpdated: TypedContractEvent<
      PointsThresholdUpdatedEvent.InputTuple,
      PointsThresholdUpdatedEvent.OutputTuple,
      PointsThresholdUpdatedEvent.OutputObject
    >;

    "PointsUpdated(uint256,uint256)": TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
    PointsUpdated: TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;

    "PositionDeposited(address,uint256,address)": TypedContractEvent<
      PositionDepositedEvent.InputTuple,
      PositionDepositedEvent.OutputTuple,
      PositionDepositedEvent.OutputObject
    >;
    PositionDeposited: TypedContractEvent<
      PositionDepositedEvent.InputTuple,
      PositionDepositedEvent.OutputTuple,
      PositionDepositedEvent.OutputObject
    >;

    "PositionWithdrawn(address,uint256,address)": TypedContractEvent<
      PositionWithdrawnEvent.InputTuple,
      PositionWithdrawnEvent.OutputTuple,
      PositionWithdrawnEvent.OutputObject
    >;
    PositionWithdrawn: TypedContractEvent<
      PositionWithdrawnEvent.InputTuple,
      PositionWithdrawnEvent.OutputTuple,
      PositionWithdrawnEvent.OutputObject
    >;

    "Recovered(address,uint256,address)": TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
    Recovered: TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
  };
}
