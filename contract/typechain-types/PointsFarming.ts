/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PointsFarmingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add"
      | "balanceOf"
      | "deposit"
      | "nonfungiblePositionManager"
      | "onERC721Received"
      | "owner"
      | "poolInfo"
      | "poolLength"
      | "recoverERC721"
      | "renounceOwnership"
      | "tokenOfOwnerByIndex"
      | "transferOwnership"
      | "userPositionInfos"
      | "v3PoolAddressPid"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddPool"
      | "OwnershipTransferred"
      | "PoolRemoved"
      | "PositionDeposited"
      | "PositionWithdrawn"
      | "RewardsClaimed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "add", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC721",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositionInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "v3PoolAddressPid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositionInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v3PoolAddressPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AddPoolEvent {
  export type InputTuple = [pid: BigNumberish, v3Pool: AddressLike];
  export type OutputTuple = [pid: bigint, v3Pool: string];
  export interface OutputObject {
    pid: bigint;
    v3Pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolRemovedEvent {
  export type InputTuple = [poolAddress: AddressLike];
  export type OutputTuple = [poolAddress: string];
  export interface OutputObject {
    poolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    poolAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    poolAddress: string
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    poolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    poolAddress: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    tokenId: bigint,
    poolAddress: string
  ];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    poolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, tokenId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PointsFarming extends BaseContract {
  connect(runner?: ContractRunner | null): PointsFarming;
  waitForDeployment(): Promise<this>;

  interface: PointsFarmingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<[poolAddress: AddressLike], [void], "nonpayable">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  deposit: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  poolInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        v3Pool: string;
        token0: string;
        token1: string;
        fee: bigint;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  recoverERC721: TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPositionInfos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, bigint] & {
        liquidity: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        reward: bigint;
        user: string;
        pid: bigint;
      }
    ],
    "view"
  >;

  v3PoolAddressPid: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<[poolAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      _from: AddressLike,
      _tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        v3Pool: string;
        token0: string;
        token1: string;
        fee: bigint;
        totalLiquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoverERC721"
  ): TypedContractMethod<
    [_token: AddressLike, _tokenId: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPositionInfos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, bigint] & {
        liquidity: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        reward: bigint;
        user: string;
        pid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "v3PoolAddressPid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AddPool"
  ): TypedContractEvent<
    AddPoolEvent.InputTuple,
    AddPoolEvent.OutputTuple,
    AddPoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolRemoved"
  ): TypedContractEvent<
    PoolRemovedEvent.InputTuple,
    PoolRemovedEvent.OutputTuple,
    PoolRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PositionDeposited"
  ): TypedContractEvent<
    PositionDepositedEvent.InputTuple,
    PositionDepositedEvent.OutputTuple,
    PositionDepositedEvent.OutputObject
  >;
  getEvent(
    key: "PositionWithdrawn"
  ): TypedContractEvent<
    PositionWithdrawnEvent.InputTuple,
    PositionWithdrawnEvent.OutputTuple,
    PositionWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;

  filters: {
    "AddPool(uint256,address)": TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;
    AddPool: TypedContractEvent<
      AddPoolEvent.InputTuple,
      AddPoolEvent.OutputTuple,
      AddPoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolRemoved(address)": TypedContractEvent<
      PoolRemovedEvent.InputTuple,
      PoolRemovedEvent.OutputTuple,
      PoolRemovedEvent.OutputObject
    >;
    PoolRemoved: TypedContractEvent<
      PoolRemovedEvent.InputTuple,
      PoolRemovedEvent.OutputTuple,
      PoolRemovedEvent.OutputObject
    >;

    "PositionDeposited(address,uint256,address)": TypedContractEvent<
      PositionDepositedEvent.InputTuple,
      PositionDepositedEvent.OutputTuple,
      PositionDepositedEvent.OutputObject
    >;
    PositionDeposited: TypedContractEvent<
      PositionDepositedEvent.InputTuple,
      PositionDepositedEvent.OutputTuple,
      PositionDepositedEvent.OutputObject
    >;

    "PositionWithdrawn(address,uint256,address)": TypedContractEvent<
      PositionWithdrawnEvent.InputTuple,
      PositionWithdrawnEvent.OutputTuple,
      PositionWithdrawnEvent.OutputObject
    >;
    PositionWithdrawn: TypedContractEvent<
      PositionWithdrawnEvent.InputTuple,
      PositionWithdrawnEvent.OutputTuple,
      PositionWithdrawnEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
  };
}
