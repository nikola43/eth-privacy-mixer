/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockToken, MockTokenInterface } from "../../contracts/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c6438038062000c6483398101604081905262000034916200024a565b604051806040016040528060048152602001634d6f636b60e01b815250604051806040016040528060038152602001624d434b60e81b81525081600390816200007e919062000321565b5060046200008d828262000321565b505050620000c981620000a5620000d060201b60201c565b620000b290600a62000502565b620000c3906402540be40062000513565b620000d5565b5062000543565b601290565b6001600160a01b038216620001055760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620001136000838362000117565b5050565b6001600160a01b038316620001465780600260008282546200013a91906200052d565b90915550620001ba9050565b6001600160a01b038316600090815260208190526040902054818110156200019b5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000fc565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620001d857600280548290039055620001f7565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200023d91815260200190565b60405180910390a3505050565b6000602082840312156200025d57600080fd5b81516001600160a01b03811681146200027557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002a757607f821691505b602082108103620002c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200031c57600081815260208120601f850160051c81016020861015620002f75750805b601f850160051c820191505b81811015620003185782815560010162000303565b5050505b505050565b81516001600160401b038111156200033d576200033d6200027c565b62000355816200034e845462000292565b84620002ce565b602080601f8311600181146200038d5760008415620003745750858301515b600019600386901b1c1916600185901b17855562000318565b600085815260208120601f198616915b82811015620003be578886015182559484019460019091019084016200039d565b5085821015620003dd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000444578160001904821115620004285762000428620003ed565b808516156200043657918102915b93841c939080029062000408565b509250929050565b6000826200045d57506001620004fc565b816200046c57506000620004fc565b81600181146200048557600281146200049057620004b0565b6001915050620004fc565b60ff841115620004a457620004a4620003ed565b50506001821b620004fc565b5060208310610133831016604e8410600b8410161715620004d5575081810a620004fc565b620004e1838362000403565b8060001904821115620004f857620004f8620003ed565b0290505b92915050565b60006200027560ff8416836200044c565b8082028115828204841417620004fc57620004fc620003ed565b80820180821115620004fc57620004fc620003ed565b61071180620005536000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806306fdde0314610088578063095ea7b3146100a657806318160ddd146100c957806323b872dd146100db578063313ce567146100ee57806370a08231146100fd57806395d89b4114610126578063a9059cbb1461012e578063dd62ed3e14610141575b600080fd5b610090610154565b60405161009d9190610526565b60405180910390f35b6100b96100b4366004610590565b6101e6565b604051901515815260200161009d565b6002545b60405190815260200161009d565b6100b96100e93660046105ba565b610200565b6040516012815260200161009d565b6100cd61010b3660046105f6565b6001600160a01b031660009081526020819052604090205490565b610090610224565b6100b961013c366004610590565b610233565b6100cd61014f366004610618565b610241565b6060600380546101639061064b565b80601f016020809104026020016040519081016040528092919081815260200182805461018f9061064b565b80156101dc5780601f106101b1576101008083540402835291602001916101dc565b820191906000526020600020905b8154815290600101906020018083116101bf57829003601f168201915b5050505050905090565b6000336101f481858561026c565b60019150505b92915050565b60003361020e85828561027e565b6102198585856102db565b506001949350505050565b6060600480546101639061064b565b6000336101f48185856102db565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610279838383600161033a565b505050565b600061028a8484610241565b90506000198110156102d557818110156102c657828183604051637dc7a0d960e11b81526004016102bd93929190610685565b60405180910390fd5b6102d58484848403600061033a565b50505050565b6001600160a01b038316610305576000604051634b637e8f60e11b81526004016102bd91906106a6565b6001600160a01b03821661032f57600060405163ec442f0560e01b81526004016102bd91906106a6565b61027983838361040f565b6001600160a01b03841661036457600060405163e602df0560e01b81526004016102bd91906106a6565b6001600160a01b03831661038e576000604051634a1406b160e11b81526004016102bd91906106a6565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156102d557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161040191815260200190565b60405180910390a350505050565b6001600160a01b03831661043a57806002600082825461042f91906106ba565b909155506104999050565b6001600160a01b0383166000908152602081905260409020548181101561047a5783818360405163391434e360e21b81526004016102bd93929190610685565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104b5576002805482900390556104d4565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161051991815260200190565b60405180910390a3505050565b600060208083528351808285015260005b8181101561055357858101830151858201604001528201610537565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461058b57600080fd5b919050565b600080604083850312156105a357600080fd5b6105ac83610574565b946020939093013593505050565b6000806000606084860312156105cf57600080fd5b6105d884610574565b92506105e660208501610574565b9150604084013590509250925092565b60006020828403121561060857600080fd5b61061182610574565b9392505050565b6000806040838503121561062b57600080fd5b61063483610574565b915061064260208401610574565b90509250929050565b600181811c9082168061065f57607f821691505b60208210810361067f57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b808201808211156101fa57634e487b7160e01b600052601160045260246000fdfea26469706673582212203813d3bc94184d6b65198adb0827adb0986a3f05590b9ab9d9b7311e091890b364736f6c63430008140033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    recipient: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(recipient, overrides || {});
  }
  override deploy(
    recipient: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(recipient, overrides || {}) as Promise<
      MockToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockToken__factory {
    return super.connect(runner) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new Interface(_abi) as MockTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockToken {
    return new Contract(address, _abi, runner) as unknown as MockToken;
  }
}
